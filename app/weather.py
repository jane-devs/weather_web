import requests
from datetime import datetime


def weathercode_to_icon(code: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–∫–æ–Ω–∫—É –ø–æ –∫–æ–¥—É –ø–æ–≥–æ–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    mapping = {
        0: ('–Ø—Å–Ω–æ', '‚òÄÔ∏è'),
        1: ('–ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–ª–∞—á–Ω–æ', 'üå§Ô∏è'),
        2: ('–û–±–ª–∞—á–Ω–æ', '‚òÅÔ∏è'),
        3: ('–ü–∞—Å–º—É—Ä–Ω–æ', '‚òÅÔ∏è'),
        45: ('–¢—É–º–∞–Ω', 'üå´Ô∏è'),
        48: ('–ò–Ω–µ–π', 'üå´Ô∏è'),
        51: ('–õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å', 'üå¶Ô∏è'),
        53: ('–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å', 'üåßÔ∏è'),
        55: ('–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å', 'üåßÔ∏è'),
        61: ('–î–æ–∂–¥—å', 'üåßÔ∏è'),
        63: ('–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å', 'üåßÔ∏è'),
        65: ('–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å', 'üåßÔ∏è'),
        71: ('–°–Ω–µ–≥', '‚ùÑÔ∏è'),
        73: ('–°–Ω–µ–≥', '‚ùÑÔ∏è'),
        75: ('–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥', '‚ùÑÔ∏è'),
        80: ('–õ–∏–≤–Ω–∏', 'üåßÔ∏è'),
        81: ('–°–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏', 'üåßÔ∏è'),
        82: ('–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏', 'üåßÔ∏è'),
        95: ('–ì—Ä–æ–∑–∞', '‚õàÔ∏è'),
        96: ('–ì—Ä–æ–∑–∞ —Å –ª–µ–≥–∫–∏–º –≥—Ä–∞–¥–æ–º', '‚õàÔ∏è'),
        99: ('–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º', '‚õàÔ∏è'),
    }
    return mapping.get(code, ('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', '‚ùì'))


def fetch_weather(city_en: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –∑–∞–≤—Ç—Ä–∞
    –ø–æ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞.
    """
    location = search_city(city_en)
    lat, lon, name = (
        location[0]['latitude'],
        location[0]['longitude'],
        location[0]['name']
    )

    url = (
        f'https://api.open-meteo.com/v1/forecast?'
        f'latitude={lat}&longitude={lon}&current_weather=true&'
        f'hourly=relative_humidity_2m,pressure_msl,precipitation&'
        f'daily=temperature_2m_max,temperature_2m_min,weathercode,precipitation_sum,windspeed_10m_max&' # noqa
        f'timezone=Europe/Moscow'
    )

    r = requests.get(url)
    if r.status_code != 200:
        return None
    data = r.json()

    current = data.get('current_weather')
    daily = data.get('daily', {})

    if not current or not daily:
        return None

    dt_str = current.get('time')
    dt_obj = datetime.fromisoformat(dt_str) if dt_str else None
    dt_formatted = dt_obj.strftime('%d.%m.%Y %H:%M') if dt_obj else dt_str
    condition_text, condition_icon = weathercode_to_icon(
        current.get('weathercode'))

    def parse_day(index):
        weathercode = daily['weathercode'][index]
        cond_text, cond_icon = weathercode_to_icon(weathercode)
        return {
            'date': daily['time'][index],
            'temp_max': daily['temperature_2m_max'][index],
            'temp_min': daily['temperature_2m_min'][index],
            'condition_text': cond_text,
            'condition_icon': cond_icon,
            'precipitation': daily['precipitation_sum'][index],
        }

    weather_info = {
        'city': name,
        'temp': current.get('temperature'),
        'condition_text': condition_text,
        'condition_icon': condition_icon,
        'datetime': dt_formatted,
        'today': parse_day(0) if len(daily.get('time', [])) > 0 else None,
        'tomorrow': parse_day(1) if len(daily.get('time', [])) > 1 else None,
    }

    return weather_info


def search_city(city_en: str):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
    —Å –ø–æ–º–æ—â—å—é Open-Meteo Geocoding API.
    """
    city_en = city_en.replace(' - ', ' ').replace('-', ' ').strip()
    url = f'https://geocoding-api.open-meteo.com/v1/search?name={city_en}&count=5' # noqa
    res = requests.get(url)
    results = res.json().get('results', [])
    if not results:
        raise ValueError(f"–ì–æ—Ä–æ–¥ '{city_en}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return results
